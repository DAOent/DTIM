// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class RustWraper {
  Future<int> connect({required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta;

  /// 获取种子
  Future<List<String>> seedGenerate({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSeedGenerateConstMeta;

  /// 种子换取账户信息
  Future<String> getSeedPhrase(
      {required String seedStr,
      required String name,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSeedPhraseConstMeta;

  Future<bool> addKeyring(
      {required String keyringStr, required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddKeyringConstMeta;

  Future<String> signFromAddress(
      {required String address, required String ctx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignFromAddressConstMeta;

  Future<int> getBlockNumber({required int client, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBlockNumberConstMeta;

  Future<AssetAccountData> nativeBalance(
      {required int client, required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNativeBalanceConstMeta;

  Future<AssetAccountData> daoBalance(
      {required int client,
      required int daoId,
      required String address,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoBalanceConstMeta;

  Future<DaoInfo> daoInfo(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoInfoConstMeta;

  Future<int> daoTotalIssuance(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoTotalIssuanceConstMeta;

  Future<List<Quarter>> daoRoadmap(
      {required int client,
      required int daoId,
      required int year,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoRoadmapConstMeta;

  Future<bool> daoCreateRoadmapTask(
      {required String from,
      required int client,
      required int daoId,
      required int roadmapId,
      required String name,
      required int priority,
      required Uint8List tags,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoCreateRoadmapTaskConstMeta;

  Future<bool> joinDao(
      {required String from,
      required int client,
      required int daoId,
      required int shareExpect,
      required int value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJoinDaoConstMeta;

  Future<List<String>> daoMemebers(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoMemebersConstMeta;

  Future<List<ProjectInfo>> daoProjects(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectsConstMeta;

  Future<List<GuildInfo>> daoGuilds(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGuildsConstMeta;

  Future<String> ss58({required String address, int? prefix, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSs58ConstMeta;

  Future<bool> createProject(
      {required String from,
      required int client,
      required int daoId,
      required String name,
      required String desc,
      WithGovPs? ext,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateProjectConstMeta;

  Future<bool> createGuild(
      {required String from,
      required int client,
      required int daoId,
      required String name,
      required String desc,
      WithGovPs? ext,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateGuildConstMeta;

  Future<List<GovProps>> daoGovPendingReferendumList(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGovPendingReferendumListConstMeta;

  Future<List<GovReferendum>> daoGovReferendumList(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGovReferendumListConstMeta;

  Future<bool> daoGovStartReferendum(
      {required String from,
      required int client,
      required int daoId,
      required int index,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGovStartReferendumConstMeta;

  Future<bool> daoGovVoteForReferendum(
      {required String from,
      required int client,
      required int daoId,
      required int index,
      required int vote,
      required bool approve,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGovVoteForReferendumConstMeta;

  Future<List<GovVote>> daoGovVotesOfUser(
      {required String from,
      required int client,
      required int daoId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGovVotesOfUserConstMeta;

  Future<bool> daoGovRunProposal(
      {required String from,
      required int client,
      required int daoId,
      required int index,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGovRunProposalConstMeta;

  Future<bool> daoGovUnlock(
      {required String from,
      required int client,
      required int daoId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGovUnlockConstMeta;

  Future<List<String>> daoMemeberList(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoMemeberListConstMeta;

  Future<List<String>> daoGuildMemeberList(
      {required int client,
      required int daoId,
      required int guildId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGuildMemeberListConstMeta;

  Future<List<String>> daoProjectMemberList(
      {required int client,
      required int daoId,
      required int projectId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectMemberListConstMeta;

  Future<List<TaskInfo>> daoProjectTaskList(
      {required int client,
      required int daoId,
      required int projectId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectTaskListConstMeta;

  Future<TaskInfo> daoProjectTaskInfo(
      {required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectTaskInfoConstMeta;

  Future<bool> daoProjectCreateTask(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required String name,
      required String desc,
      required int priority,
      required int point,
      List<String>? assignees,
      List<String>? reviewers,
      Uint8List? skills,
      int? maxAssignee,
      required int amount,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectCreateTaskConstMeta;

  Future<bool> daoProjectStartTask(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectStartTaskConstMeta;

  Future<bool> daoProjectRequestReview(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectRequestReviewConstMeta;

  Future<bool> daoProjectTaskDone(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectTaskDoneConstMeta;

  Future<bool> daoProjectJoinTask(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectJoinTaskConstMeta;

  Future<bool> daoProjectLeaveTask(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectLeaveTaskConstMeta;

  Future<bool> daoProjectJoinTaskReview(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectJoinTaskReviewConstMeta;

  Future<bool> daoProjectLeaveTaskReview(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectLeaveTaskReviewConstMeta;

  Future<bool> daoProjectMakeReview(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      required bool approve,
      required String meta,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectMakeReviewConstMeta;

  Future<bool> daoProjectJoinRequest(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      WithGovPs? ext,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectJoinRequestConstMeta;

  Future<bool> daoGuildJoinRequest(
      {required String from,
      required int client,
      required int daoId,
      required int guildId,
      WithGovPs? ext,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGuildJoinRequestConstMeta;

  Future<int> daoMemberPoint(
      {required int client,
      required int daoId,
      required String member,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoMemberPointConstMeta;

  Future<bool> daoApplyProjectFunds(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int amount,
      WithGovPs? ext,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoApplyProjectFundsConstMeta;
}

class AssetAccountData {
  final int free;
  final int reserved;
  final int frozen;

  const AssetAccountData({
    required this.free,
    required this.reserved,
    required this.frozen,
  });
}

/// DAO specific information
/// 组织信息
class DaoInfo {
  final int id;

  /// creator of DAO
  /// 创建者
  final String creator;

  /// The block that creates the DAO
  /// DAO创建的区块
  final int startBlock;

  /// DAO account id.
  /// DAO 链上账户ID
  final String daoAccountId;

  /// name of the DAO.
  /// DAO 名字
  final String name;

  /// Purpose of the DAO.
  /// DAO 目标宗旨
  final String purpose;

  /// DAO 元数据 图片等内容
  final String metaData;

  const DaoInfo({
    required this.id,
    required this.creator,
    required this.startBlock,
    required this.daoAccountId,
    required this.name,
    required this.purpose,
    required this.metaData,
  });
}

/// Waiting to start voting information
/// 待开始投票信息
class GovProps {
  final int index;

  /// The hash of referendum.
  final String hash;

  /// The hash of the proposal being voted on.
  /// 投票后执行内容
  final String runtimeCall;

  /// 执行范围
  final MemberGroup memberGroup;
  final String account;

  const GovProps({
    required this.index,
    required this.hash,
    required this.runtimeCall,
    required this.memberGroup,
    required this.account,
  });
}

class GovReferendum {
  final int id;

  /// The hash of referendum.
  final String hash;

  /// When voting on this referendum will end.
  /// 投票结束事件
  final int end;

  /// The hash of the proposal being voted on.
  /// 投票后执行内容
  final String proposal;

  /// The delay (in blocks) to wait after a successful referendum before deploying.
  /// 投票完成后多久被允许执行
  final int delay;

  /// The current tally of votes in this referendum.
  /// 投票统计
  final Tally tally;

  /// 投票范围
  final MemberGroup memberGroup;

  /// 投票状态
  final int status;

  const GovReferendum({
    required this.id,
    required this.hash,
    required this.end,
    required this.proposal,
    required this.delay,
    required this.tally,
    required this.memberGroup,
    required this.status,
  });
}

class GovVote {
  /// The id of the Dao where the vote is located.
  /// 投票所在组织
  final int daoId;

  /// The specific thing that the vote pledged.
  /// 抵押
  final int pledge;

  /// Object or agree.
  /// 是否同意
  final int opinion;

  /// voting weight.
  /// 投票权重
  final int voteWeight;

  /// Block height that can be unlocked.
  /// 投票解锁阶段
  final int unlockBlock;

  /// The referendum id corresponding to the vote.
  /// 投票的全民公投
  final int referendumIndex;

  const GovVote({
    required this.daoId,
    required this.pledge,
    required this.opinion,
    required this.voteWeight,
    required this.unlockBlock,
    required this.referendumIndex,
  });
}

/// Guild information
/// 组织内公会信息
class GuildInfo {
  /// boardID
  /// 看板ID
  final int id;

  /// creator of DAO
  /// 创建者
  final String creator;

  /// DAO account id.
  /// DAO 链上账户ID
  final String daoAccountId;

  /// The block that creates the DAO
  /// DAO创建的区块
  final int startBlock;

  /// Purpose of the DAO.
  /// DAO 目标宗旨
  final String name;

  /// Purpose of the DAO.
  /// DAO 目标宗旨
  final String desc;

  /// DAO 元数据 图片等内容
  final String metaData;

  /// State of the DAO
  /// DAO状态
  final int status;

  const GuildInfo({
    required this.id,
    required this.creator,
    required this.daoAccountId,
    required this.startBlock,
    required this.name,
    required this.desc,
    required this.metaData,
    required this.status,
  });
}

class MemberGroup {
  final int scope;
  final int id;

  const MemberGroup({
    required this.scope,
    required this.id,
  });
}

/// Project specific information
/// 项目信息
class ProjectInfo {
  /// boardID
  /// 看板ID
  final int id;

  /// 项目名
  final String name;

  /// DAO account id.
  /// DAO 链上账户ID
  final String daoAccountId;

  /// 项目介绍
  final String description;

  /// creator of WETEE
  /// 创建者
  final String creator;

  /// State of the WETEE
  /// WETEE状态
  final int status;

  const ProjectInfo({
    required this.id,
    required this.name,
    required this.daoAccountId,
    required this.description,
    required this.creator,
    required this.status,
  });
}

/// roadmap 季度
class Quarter {
  final int year;
  final int quarter;
  final List<QuarterTask> tasks;

  const Quarter({
    required this.year,
    required this.quarter,
    required this.tasks,
  });
}

/// roadmap 任务
class QuarterTask {
  final int id;

  /// 任务名称
  /// name of the Task.
  final String name;

  /// priority
  /// 优先程度
  final int priority;

  /// creator of Task
  /// 创建者
  final String creator;

  /// tag info
  /// 数据标签
  final Uint8List tags;

  /// State of the Task
  /// DAO状态
  /// ToDo = 0,
  /// InProgress = 1,
  /// InReview = 2,
  /// Done = 3,
  final int status;

  const QuarterTask({
    required this.id,
    required this.name,
    required this.priority,
    required this.creator,
    required this.tags,
    required this.status,
  });
}

class Reward {
  final int assetId;
  final int amount;

  const Reward({
    required this.assetId,
    required this.amount,
  });
}

class Tally {
  /// The number of yes votes
  /// 同意的数量
  final int yes;

  /// The number of no votes
  /// 不同意的数量
  final int no;

  const Tally({
    required this.yes,
    required this.no,
  });
}

/// task specific information
/// 任务信息
class TaskInfo {
  final int id;
  final String name;
  final String description;

  /// task point
  /// 任务价值点
  final int point;

  /// priority
  /// 优先程度
  final int priority;

  /// projectID
  /// 看板ID
  final int projectId;

  /// creator of WETEE
  /// 创建者
  final String creator;

  /// rewards
  /// 奖金
  final List<Reward> rewards;
  final int maxAssignee;

  /// assignes info
  /// 受托人
  final List<String> assignees;

  /// reviewer
  /// 审查人
  final List<String> reviewers;

  /// skill info
  /// 技能
  final Uint8List skills;

  /// State of the WETEE
  /// WETEE状态
  final int status;

  const TaskInfo({
    required this.id,
    required this.name,
    required this.description,
    required this.point,
    required this.priority,
    required this.projectId,
    required this.creator,
    required this.rewards,
    required this.maxAssignee,
    required this.assignees,
    required this.reviewers,
    required this.skills,
    required this.status,
  });
}

/// vote yes or no
/// 投票
class WithGovPs {
  final int runType;
  final int amount;
  final MemberGroup member;

  const WithGovPs({
    required this.runType,
    required this.amount,
    required this.member,
  });
}

class RustWraperImpl implements RustWraper {
  final RustWraperPlatform _platform;
  factory RustWraperImpl(ExternalLibrary dylib) =>
      RustWraperImpl.raw(RustWraperPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustWraperImpl.wasm(FutureOr<WasmModule> module) =>
      RustWraperImpl(module as ExternalLibrary);
  RustWraperImpl.raw(this._platform);
  Future<int> connect({required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect(port_, arg0),
      parseSuccessData: _wire2api_usize,
      constMeta: kConnectConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect",
        argNames: ["url"],
      );

  Future<List<String>> seedGenerate({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_seed_generate(port_),
      parseSuccessData: _wire2api_StringList,
      constMeta: kSeedGenerateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSeedGenerateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "seed_generate",
        argNames: [],
      );

  Future<String> getSeedPhrase(
      {required String seedStr,
      required String name,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(seedStr);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_seed_phrase(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kGetSeedPhraseConstMeta,
      argValues: [seedStr, name, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSeedPhraseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_seed_phrase",
        argNames: ["seedStr", "name", "password"],
      );

  Future<bool> addKeyring(
      {required String keyringStr, required String password, dynamic hint}) {
    var arg0 = _platform.api2wire_String(keyringStr);
    var arg1 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_keyring(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kAddKeyringConstMeta,
      argValues: [keyringStr, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddKeyringConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_keyring",
        argNames: ["keyringStr", "password"],
      );

  Future<String> signFromAddress(
      {required String address, required String ctx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    var arg1 = _platform.api2wire_String(ctx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sign_from_address(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSignFromAddressConstMeta,
      argValues: [address, ctx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignFromAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_from_address",
        argNames: ["address", "ctx"],
      );

  Future<int> getBlockNumber({required int client, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_block_number(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kGetBlockNumberConstMeta,
      argValues: [client],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBlockNumberConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_block_number",
        argNames: ["client"],
      );

  Future<AssetAccountData> nativeBalance(
      {required int client, required String address, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_native_balance(port_, arg0, arg1),
      parseSuccessData: _wire2api_asset_account_data,
      constMeta: kNativeBalanceConstMeta,
      argValues: [client, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNativeBalanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "native_balance",
        argNames: ["client", "address"],
      );

  Future<AssetAccountData> daoBalance(
      {required int client,
      required int daoId,
      required String address,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_balance(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_asset_account_data,
      constMeta: kDaoBalanceConstMeta,
      argValues: [client, daoId, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoBalanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_balance",
        argNames: ["client", "daoId", "address"],
      );

  Future<DaoInfo> daoInfo(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_info(port_, arg0, arg1),
      parseSuccessData: _wire2api_dao_info,
      constMeta: kDaoInfoConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_info",
        argNames: ["client", "daoId"],
      );

  Future<int> daoTotalIssuance(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_total_issuance(port_, arg0, arg1),
      parseSuccessData: _wire2api_u64,
      constMeta: kDaoTotalIssuanceConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoTotalIssuanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_total_issuance",
        argNames: ["client", "daoId"],
      );

  Future<List<Quarter>> daoRoadmap(
      {required int client,
      required int daoId,
      required int year,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = api2wire_u32(year);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_roadmap(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_quarter,
      constMeta: kDaoRoadmapConstMeta,
      argValues: [client, daoId, year],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoRoadmapConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_roadmap",
        argNames: ["client", "daoId", "year"],
      );

  Future<bool> daoCreateRoadmapTask(
      {required String from,
      required int client,
      required int daoId,
      required int roadmapId,
      required String name,
      required int priority,
      required Uint8List tags,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = api2wire_u32(roadmapId);
    var arg4 = _platform.api2wire_String(name);
    var arg5 = api2wire_u8(priority);
    var arg6 = _platform.api2wire_uint_8_list(tags);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_create_roadmap_task(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoCreateRoadmapTaskConstMeta,
      argValues: [from, client, daoId, roadmapId, name, priority, tags],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoCreateRoadmapTaskConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_create_roadmap_task",
        argNames: [
          "from",
          "client",
          "daoId",
          "roadmapId",
          "name",
          "priority",
          "tags"
        ],
      );

  Future<bool> joinDao(
      {required String from,
      required int client,
      required int daoId,
      required int shareExpect,
      required int value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = api2wire_u32(shareExpect);
    var arg4 = _platform.api2wire_u64(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_join_dao(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kJoinDaoConstMeta,
      argValues: [from, client, daoId, shareExpect, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJoinDaoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "join_dao",
        argNames: ["from", "client", "daoId", "shareExpect", "value"],
      );

  Future<List<String>> daoMemebers(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_memebers(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kDaoMemebersConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoMemebersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_memebers",
        argNames: ["client", "daoId"],
      );

  Future<List<ProjectInfo>> daoProjects(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_projects(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_project_info,
      constMeta: kDaoProjectsConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_projects",
        argNames: ["client", "daoId"],
      );

  Future<List<GuildInfo>> daoGuilds(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_guilds(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_guild_info,
      constMeta: kDaoGuildsConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGuildsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_guilds",
        argNames: ["client", "daoId"],
      );

  Future<String> ss58({required String address, int? prefix, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    var arg1 = _platform.api2wire_opt_box_autoadd_u16(prefix);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ss58(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSs58ConstMeta,
      argValues: [address, prefix],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSs58ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ss58",
        argNames: ["address", "prefix"],
      );

  Future<bool> createProject(
      {required String from,
      required int client,
      required int daoId,
      required String name,
      required String desc,
      WithGovPs? ext,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_String(name);
    var arg4 = _platform.api2wire_String(desc);
    var arg5 = _platform.api2wire_opt_box_autoadd_with_gov_ps(ext);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_create_project(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_bool,
      constMeta: kCreateProjectConstMeta,
      argValues: [from, client, daoId, name, desc, ext],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateProjectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_project",
        argNames: ["from", "client", "daoId", "name", "desc", "ext"],
      );

  Future<bool> createGuild(
      {required String from,
      required int client,
      required int daoId,
      required String name,
      required String desc,
      WithGovPs? ext,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_String(name);
    var arg4 = _platform.api2wire_String(desc);
    var arg5 = _platform.api2wire_opt_box_autoadd_with_gov_ps(ext);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_create_guild(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_bool,
      constMeta: kCreateGuildConstMeta,
      argValues: [from, client, daoId, name, desc, ext],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateGuildConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_guild",
        argNames: ["from", "client", "daoId", "name", "desc", "ext"],
      );

  Future<List<GovProps>> daoGovPendingReferendumList(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_gov_pending_referendum_list(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_gov_props,
      constMeta: kDaoGovPendingReferendumListConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGovPendingReferendumListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_gov_pending_referendum_list",
        argNames: ["client", "daoId"],
      );

  Future<List<GovReferendum>> daoGovReferendumList(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_gov_referendum_list(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_gov_referendum,
      constMeta: kDaoGovReferendumListConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGovReferendumListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_gov_referendum_list",
        argNames: ["client", "daoId"],
      );

  Future<bool> daoGovStartReferendum(
      {required String from,
      required int client,
      required int daoId,
      required int index,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = api2wire_u32(index);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_gov_start_referendum(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoGovStartReferendumConstMeta,
      argValues: [from, client, daoId, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGovStartReferendumConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_gov_start_referendum",
        argNames: ["from", "client", "daoId", "index"],
      );

  Future<bool> daoGovVoteForReferendum(
      {required String from,
      required int client,
      required int daoId,
      required int index,
      required int vote,
      required bool approve,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = api2wire_u32(index);
    var arg4 = _platform.api2wire_u64(vote);
    var arg5 = approve;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_gov_vote_for_referendum(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoGovVoteForReferendumConstMeta,
      argValues: [from, client, daoId, index, vote, approve],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGovVoteForReferendumConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_gov_vote_for_referendum",
        argNames: ["from", "client", "daoId", "index", "vote", "approve"],
      );

  Future<List<GovVote>> daoGovVotesOfUser(
      {required String from,
      required int client,
      required int daoId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_gov_votes_of_user(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_gov_vote,
      constMeta: kDaoGovVotesOfUserConstMeta,
      argValues: [from, client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGovVotesOfUserConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_gov_votes_of_user",
        argNames: ["from", "client", "daoId"],
      );

  Future<bool> daoGovRunProposal(
      {required String from,
      required int client,
      required int daoId,
      required int index,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = api2wire_u32(index);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_gov_run_proposal(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoGovRunProposalConstMeta,
      argValues: [from, client, daoId, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGovRunProposalConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_gov_run_proposal",
        argNames: ["from", "client", "daoId", "index"],
      );

  Future<bool> daoGovUnlock(
      {required String from,
      required int client,
      required int daoId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_gov_unlock(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoGovUnlockConstMeta,
      argValues: [from, client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGovUnlockConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_gov_unlock",
        argNames: ["from", "client", "daoId"],
      );

  Future<List<String>> daoMemeberList(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_memeber_list(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kDaoMemeberListConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoMemeberListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_memeber_list",
        argNames: ["client", "daoId"],
      );

  Future<List<String>> daoGuildMemeberList(
      {required int client,
      required int daoId,
      required int guildId,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = _platform.api2wire_u64(guildId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_guild_memeber_list(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_StringList,
      constMeta: kDaoGuildMemeberListConstMeta,
      argValues: [client, daoId, guildId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGuildMemeberListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_guild_memeber_list",
        argNames: ["client", "daoId", "guildId"],
      );

  Future<List<String>> daoProjectMemberList(
      {required int client,
      required int daoId,
      required int projectId,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = _platform.api2wire_u64(projectId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_project_member_list(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_StringList,
      constMeta: kDaoProjectMemberListConstMeta,
      argValues: [client, daoId, projectId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectMemberListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_member_list",
        argNames: ["client", "daoId", "projectId"],
      );

  Future<List<TaskInfo>> daoProjectTaskList(
      {required int client,
      required int daoId,
      required int projectId,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = _platform.api2wire_u64(projectId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_project_task_list(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_task_info,
      constMeta: kDaoProjectTaskListConstMeta,
      argValues: [client, daoId, projectId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectTaskListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_task_list",
        argNames: ["client", "daoId", "projectId"],
      );

  Future<TaskInfo> daoProjectTaskInfo(
      {required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = _platform.api2wire_u64(projectId);
    var arg3 = _platform.api2wire_u64(taskId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_project_task_info(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_task_info,
      constMeta: kDaoProjectTaskInfoConstMeta,
      argValues: [client, daoId, projectId, taskId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectTaskInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_task_info",
        argNames: ["client", "daoId", "projectId", "taskId"],
      );

  Future<bool> daoProjectCreateTask(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required String name,
      required String desc,
      required int priority,
      required int point,
      List<String>? assignees,
      List<String>? reviewers,
      Uint8List? skills,
      int? maxAssignee,
      required int amount,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_String(name);
    var arg5 = _platform.api2wire_String(desc);
    var arg6 = api2wire_u8(priority);
    var arg7 = api2wire_u16(point);
    var arg8 = _platform.api2wire_opt_StringList(assignees);
    var arg9 = _platform.api2wire_opt_StringList(reviewers);
    var arg10 = _platform.api2wire_opt_uint_8_list(skills);
    var arg11 = _platform.api2wire_opt_box_autoadd_u8(maxAssignee);
    var arg12 = _platform.api2wire_u64(amount);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_project_create_task(
          port_,
          arg0,
          arg1,
          arg2,
          arg3,
          arg4,
          arg5,
          arg6,
          arg7,
          arg8,
          arg9,
          arg10,
          arg11,
          arg12),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectCreateTaskConstMeta,
      argValues: [
        from,
        client,
        daoId,
        projectId,
        name,
        desc,
        priority,
        point,
        assignees,
        reviewers,
        skills,
        maxAssignee,
        amount
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectCreateTaskConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_create_task",
        argNames: [
          "from",
          "client",
          "daoId",
          "projectId",
          "name",
          "desc",
          "priority",
          "point",
          "assignees",
          "reviewers",
          "skills",
          "maxAssignee",
          "amount"
        ],
      );

  Future<bool> daoProjectStartTask(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(taskId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_project_start_task(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectStartTaskConstMeta,
      argValues: [from, client, daoId, projectId, taskId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectStartTaskConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_start_task",
        argNames: ["from", "client", "daoId", "projectId", "taskId"],
      );

  Future<bool> daoProjectRequestReview(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(taskId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_project_request_review(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectRequestReviewConstMeta,
      argValues: [from, client, daoId, projectId, taskId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectRequestReviewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_request_review",
        argNames: ["from", "client", "daoId", "projectId", "taskId"],
      );

  Future<bool> daoProjectTaskDone(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(taskId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_project_task_done(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectTaskDoneConstMeta,
      argValues: [from, client, daoId, projectId, taskId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectTaskDoneConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_task_done",
        argNames: ["from", "client", "daoId", "projectId", "taskId"],
      );

  Future<bool> daoProjectJoinTask(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(taskId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_project_join_task(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectJoinTaskConstMeta,
      argValues: [from, client, daoId, projectId, taskId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectJoinTaskConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_join_task",
        argNames: ["from", "client", "daoId", "projectId", "taskId"],
      );

  Future<bool> daoProjectLeaveTask(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(taskId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_project_leave_task(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectLeaveTaskConstMeta,
      argValues: [from, client, daoId, projectId, taskId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectLeaveTaskConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_leave_task",
        argNames: ["from", "client", "daoId", "projectId", "taskId"],
      );

  Future<bool> daoProjectJoinTaskReview(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(taskId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_project_join_task_review(
          port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectJoinTaskReviewConstMeta,
      argValues: [from, client, daoId, projectId, taskId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectJoinTaskReviewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_join_task_review",
        argNames: ["from", "client", "daoId", "projectId", "taskId"],
      );

  Future<bool> daoProjectLeaveTaskReview(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(taskId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_project_leave_task_review(
          port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectLeaveTaskReviewConstMeta,
      argValues: [from, client, daoId, projectId, taskId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectLeaveTaskReviewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_leave_task_review",
        argNames: ["from", "client", "daoId", "projectId", "taskId"],
      );

  Future<bool> daoProjectMakeReview(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int taskId,
      required bool approve,
      required String meta,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(taskId);
    var arg5 = approve;
    var arg6 = _platform.api2wire_String(meta);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_project_make_review(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectMakeReviewConstMeta,
      argValues: [from, client, daoId, projectId, taskId, approve, meta],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectMakeReviewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_make_review",
        argNames: [
          "from",
          "client",
          "daoId",
          "projectId",
          "taskId",
          "approve",
          "meta"
        ],
      );

  Future<bool> daoProjectJoinRequest(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      WithGovPs? ext,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_opt_box_autoadd_with_gov_ps(ext);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_project_join_request(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoProjectJoinRequestConstMeta,
      argValues: [from, client, daoId, projectId, ext],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectJoinRequestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_project_join_request",
        argNames: ["from", "client", "daoId", "projectId", "ext"],
      );

  Future<bool> daoGuildJoinRequest(
      {required String from,
      required int client,
      required int daoId,
      required int guildId,
      WithGovPs? ext,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(guildId);
    var arg4 = _platform.api2wire_opt_box_autoadd_with_gov_ps(ext);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_dao_guild_join_request(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoGuildJoinRequestConstMeta,
      argValues: [from, client, daoId, guildId, ext],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGuildJoinRequestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_guild_join_request",
        argNames: ["from", "client", "daoId", "guildId", "ext"],
      );

  Future<int> daoMemberPoint(
      {required int client,
      required int daoId,
      required String member,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = _platform.api2wire_String(member);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_member_point(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_u32,
      constMeta: kDaoMemberPointConstMeta,
      argValues: [client, daoId, member],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoMemberPointConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_member_point",
        argNames: ["client", "daoId", "member"],
      );

  Future<bool> daoApplyProjectFunds(
      {required String from,
      required int client,
      required int daoId,
      required int projectId,
      required int amount,
      WithGovPs? ext,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(from);
    var arg1 = api2wire_u32(client);
    var arg2 = _platform.api2wire_u64(daoId);
    var arg3 = _platform.api2wire_u64(projectId);
    var arg4 = _platform.api2wire_u64(amount);
    var arg5 = _platform.api2wire_opt_box_autoadd_with_gov_ps(ext);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_apply_project_funds(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_bool,
      constMeta: kDaoApplyProjectFundsConstMeta,
      argValues: [from, client, daoId, projectId, amount, ext],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoApplyProjectFundsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_apply_project_funds",
        argNames: ["from", "client", "daoId", "projectId", "amount", "ext"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AssetAccountData _wire2api_asset_account_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AssetAccountData(
      free: _wire2api_u64(arr[0]),
      reserved: _wire2api_u64(arr[1]),
      frozen: _wire2api_u64(arr[2]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DaoInfo _wire2api_dao_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return DaoInfo(
      id: _wire2api_u64(arr[0]),
      creator: _wire2api_String(arr[1]),
      startBlock: _wire2api_u64(arr[2]),
      daoAccountId: _wire2api_String(arr[3]),
      name: _wire2api_String(arr[4]),
      purpose: _wire2api_String(arr[5]),
      metaData: _wire2api_String(arr[6]),
    );
  }

  GovProps _wire2api_gov_props(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return GovProps(
      index: _wire2api_u32(arr[0]),
      hash: _wire2api_String(arr[1]),
      runtimeCall: _wire2api_String(arr[2]),
      memberGroup: _wire2api_member_group(arr[3]),
      account: _wire2api_String(arr[4]),
    );
  }

  GovReferendum _wire2api_gov_referendum(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return GovReferendum(
      id: _wire2api_u32(arr[0]),
      hash: _wire2api_String(arr[1]),
      end: _wire2api_u64(arr[2]),
      proposal: _wire2api_String(arr[3]),
      delay: _wire2api_u64(arr[4]),
      tally: _wire2api_tally(arr[5]),
      memberGroup: _wire2api_member_group(arr[6]),
      status: _wire2api_u8(arr[7]),
    );
  }

  GovVote _wire2api_gov_vote(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return GovVote(
      daoId: _wire2api_u64(arr[0]),
      pledge: _wire2api_u64(arr[1]),
      opinion: _wire2api_u8(arr[2]),
      voteWeight: _wire2api_u64(arr[3]),
      unlockBlock: _wire2api_u64(arr[4]),
      referendumIndex: _wire2api_u32(arr[5]),
    );
  }

  GuildInfo _wire2api_guild_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return GuildInfo(
      id: _wire2api_u64(arr[0]),
      creator: _wire2api_String(arr[1]),
      daoAccountId: _wire2api_String(arr[2]),
      startBlock: _wire2api_u64(arr[3]),
      name: _wire2api_String(arr[4]),
      desc: _wire2api_String(arr[5]),
      metaData: _wire2api_String(arr[6]),
      status: _wire2api_u8(arr[7]),
    );
  }

  List<GovProps> _wire2api_list_gov_props(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_gov_props).toList();
  }

  List<GovReferendum> _wire2api_list_gov_referendum(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_gov_referendum).toList();
  }

  List<GovVote> _wire2api_list_gov_vote(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_gov_vote).toList();
  }

  List<GuildInfo> _wire2api_list_guild_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_guild_info).toList();
  }

  List<ProjectInfo> _wire2api_list_project_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_project_info).toList();
  }

  List<Quarter> _wire2api_list_quarter(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_quarter).toList();
  }

  List<QuarterTask> _wire2api_list_quarter_task(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_quarter_task).toList();
  }

  List<Reward> _wire2api_list_reward(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_reward).toList();
  }

  List<TaskInfo> _wire2api_list_task_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_task_info).toList();
  }

  MemberGroup _wire2api_member_group(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MemberGroup(
      scope: _wire2api_u8(arr[0]),
      id: _wire2api_u64(arr[1]),
    );
  }

  ProjectInfo _wire2api_project_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ProjectInfo(
      id: _wire2api_u64(arr[0]),
      name: _wire2api_String(arr[1]),
      daoAccountId: _wire2api_String(arr[2]),
      description: _wire2api_String(arr[3]),
      creator: _wire2api_String(arr[4]),
      status: _wire2api_u8(arr[5]),
    );
  }

  Quarter _wire2api_quarter(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Quarter(
      year: _wire2api_u32(arr[0]),
      quarter: _wire2api_u32(arr[1]),
      tasks: _wire2api_list_quarter_task(arr[2]),
    );
  }

  QuarterTask _wire2api_quarter_task(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return QuarterTask(
      id: _wire2api_u64(arr[0]),
      name: _wire2api_String(arr[1]),
      priority: _wire2api_u8(arr[2]),
      creator: _wire2api_String(arr[3]),
      tags: _wire2api_uint_8_list(arr[4]),
      status: _wire2api_u8(arr[5]),
    );
  }

  Reward _wire2api_reward(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Reward(
      assetId: _wire2api_u64(arr[0]),
      amount: _wire2api_u64(arr[1]),
    );
  }

  Tally _wire2api_tally(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Tally(
      yes: _wire2api_u64(arr[0]),
      no: _wire2api_u64(arr[1]),
    );
  }

  TaskInfo _wire2api_task_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return TaskInfo(
      id: _wire2api_u64(arr[0]),
      name: _wire2api_String(arr[1]),
      description: _wire2api_String(arr[2]),
      point: _wire2api_u16(arr[3]),
      priority: _wire2api_u8(arr[4]),
      projectId: _wire2api_u64(arr[5]),
      creator: _wire2api_String(arr[6]),
      rewards: _wire2api_list_reward(arr[7]),
      maxAssignee: _wire2api_u8(arr[8]),
      assignees: _wire2api_StringList(arr[9]),
      reviewers: _wire2api_StringList(arr[10]),
      skills: _wire2api_uint_8_list(arr[11]),
      status: _wire2api_u8(arr[12]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustWraperPlatform extends FlutterRustBridgeBase<RustWraperWire> {
  RustWraperPlatform(ffi.DynamicLibrary dylib) : super(RustWraperWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<ffi.Uint16> api2wire_box_autoadd_u16(int raw) {
    return inner.new_box_autoadd_u16_0(api2wire_u16(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<wire_WithGovPs> api2wire_box_autoadd_with_gov_ps(WithGovPs raw) {
    final ptr = inner.new_box_autoadd_with_gov_ps_0();
    _api_fill_to_wire_with_gov_ps(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_opt_StringList(List<String>? raw) {
    return raw == null ? ffi.nullptr : api2wire_StringList(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint16> api2wire_opt_box_autoadd_u16(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u16(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<wire_WithGovPs> api2wire_opt_box_autoadd_with_gov_ps(
      WithGovPs? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_with_gov_ps(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_8_list(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_with_gov_ps(
      WithGovPs apiObj, ffi.Pointer<wire_WithGovPs> wireObj) {
    _api_fill_to_wire_with_gov_ps(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_member_group(
      MemberGroup apiObj, wire_MemberGroup wireObj) {
    wireObj.scope = api2wire_u8(apiObj.scope);
    wireObj.id = api2wire_u64(apiObj.id);
  }

  void _api_fill_to_wire_opt_box_autoadd_with_gov_ps(
      WithGovPs? apiObj, ffi.Pointer<wire_WithGovPs> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_with_gov_ps(apiObj, wireObj);
  }

  void _api_fill_to_wire_with_gov_ps(WithGovPs apiObj, wire_WithGovPs wireObj) {
    wireObj.run_type = api2wire_u8(apiObj.runType);
    wireObj.amount = api2wire_u64(apiObj.amount);
    _api_fill_to_wire_member_group(apiObj.member, wireObj.member);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustWraperWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWraperWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWraperWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_connect(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_connect(
      port_,
      url,
    );
  }

  late final _wire_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_connect');
  late final _wire_connect = _wire_connectPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_seed_generate(
    int port_,
  ) {
    return _wire_seed_generate(
      port_,
    );
  }

  late final _wire_seed_generatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_seed_generate');
  late final _wire_seed_generate =
      _wire_seed_generatePtr.asFunction<void Function(int)>();

  void wire_get_seed_phrase(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed_str,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_get_seed_phrase(
      port_,
      seed_str,
      name,
      password,
    );
  }

  late final _wire_get_seed_phrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_seed_phrase');
  late final _wire_get_seed_phrase = _wire_get_seed_phrasePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_keyring(
    int port_,
    ffi.Pointer<wire_uint_8_list> keyring_str,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_add_keyring(
      port_,
      keyring_str,
      password,
    );
  }

  late final _wire_add_keyringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_keyring');
  late final _wire_add_keyring = _wire_add_keyringPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sign_from_address(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
    ffi.Pointer<wire_uint_8_list> ctx,
  ) {
    return _wire_sign_from_address(
      port_,
      address,
      ctx,
    );
  }

  late final _wire_sign_from_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_sign_from_address');
  late final _wire_sign_from_address = _wire_sign_from_addressPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_block_number(
    int port_,
    int client,
  ) {
    return _wire_get_block_number(
      port_,
      client,
    );
  }

  late final _wire_get_block_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_get_block_number');
  late final _wire_get_block_number =
      _wire_get_block_numberPtr.asFunction<void Function(int, int)>();

  void wire_native_balance(
    int port_,
    int client,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_native_balance(
      port_,
      client,
      address,
    );
  }

  late final _wire_native_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_native_balance');
  late final _wire_native_balance = _wire_native_balancePtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_dao_balance(
    int port_,
    int client,
    int dao_id,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_dao_balance(
      port_,
      client,
      dao_id,
      address,
    );
  }

  late final _wire_dao_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_dao_balance');
  late final _wire_dao_balance = _wire_dao_balancePtr.asFunction<
      void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_dao_info(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_info(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Uint64)>>('wire_dao_info');
  late final _wire_dao_info =
      _wire_dao_infoPtr.asFunction<void Function(int, int, int)>();

  void wire_dao_total_issuance(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_total_issuance(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_total_issuancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Uint64)>>('wire_dao_total_issuance');
  late final _wire_dao_total_issuance =
      _wire_dao_total_issuancePtr.asFunction<void Function(int, int, int)>();

  void wire_dao_roadmap(
    int port_,
    int client,
    int dao_id,
    int year,
  ) {
    return _wire_dao_roadmap(
      port_,
      client,
      dao_id,
      year,
    );
  }

  late final _wire_dao_roadmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
              ffi.Uint32)>>('wire_dao_roadmap');
  late final _wire_dao_roadmap =
      _wire_dao_roadmapPtr.asFunction<void Function(int, int, int, int)>();

  void wire_dao_create_roadmap_task(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int roadmap_id,
    ffi.Pointer<wire_uint_8_list> name,
    int priority,
    ffi.Pointer<wire_uint_8_list> tags,
  ) {
    return _wire_dao_create_roadmap_task(
      port_,
      from,
      client,
      dao_id,
      roadmap_id,
      name,
      priority,
      tags,
    );
  }

  late final _wire_dao_create_roadmap_taskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8,
              ffi.Pointer<wire_uint_8_list>)>>('wire_dao_create_roadmap_task');
  late final _wire_dao_create_roadmap_task =
      _wire_dao_create_roadmap_taskPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              int,
              int,
              int,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_join_dao(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int share_expect,
    int value,
  ) {
    return _wire_join_dao(
      port_,
      from,
      client,
      dao_id,
      share_expect,
      value,
    );
  }

  late final _wire_join_daoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint64)>>('wire_join_dao');
  late final _wire_join_dao = _wire_join_daoPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int, int)>();

  void wire_dao_memebers(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_memebers(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_memebersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Uint64)>>('wire_dao_memebers');
  late final _wire_dao_memebers =
      _wire_dao_memebersPtr.asFunction<void Function(int, int, int)>();

  void wire_dao_projects(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_projects(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_projectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Uint64)>>('wire_dao_projects');
  late final _wire_dao_projects =
      _wire_dao_projectsPtr.asFunction<void Function(int, int, int)>();

  void wire_dao_guilds(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_guilds(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_guildsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Uint64)>>('wire_dao_guilds');
  late final _wire_dao_guilds =
      _wire_dao_guildsPtr.asFunction<void Function(int, int, int)>();

  void wire_ss58(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
    ffi.Pointer<ffi.Uint16> prefix,
  ) {
    return _wire_ss58(
      port_,
      address,
      prefix,
    );
  }

  late final _wire_ss58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint16>)>>('wire_ss58');
  late final _wire_ss58 = _wire_ss58Ptr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Uint16>)>();

  void wire_create_project(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> desc,
    ffi.Pointer<wire_WithGovPs> ext,
  ) {
    return _wire_create_project(
      port_,
      from,
      client,
      dao_id,
      name,
      desc,
      ext,
    );
  }

  late final _wire_create_projectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_WithGovPs>)>>('wire_create_project');
  late final _wire_create_project = _wire_create_projectPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          int,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_WithGovPs>)>();

  void wire_create_guild(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> desc,
    ffi.Pointer<wire_WithGovPs> ext,
  ) {
    return _wire_create_guild(
      port_,
      from,
      client,
      dao_id,
      name,
      desc,
      ext,
    );
  }

  late final _wire_create_guildPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_WithGovPs>)>>('wire_create_guild');
  late final _wire_create_guild = _wire_create_guildPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          int,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_WithGovPs>)>();

  void wire_dao_gov_pending_referendum_list(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_gov_pending_referendum_list(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_gov_pending_referendum_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32,
              ffi.Uint64)>>('wire_dao_gov_pending_referendum_list');
  late final _wire_dao_gov_pending_referendum_list =
      _wire_dao_gov_pending_referendum_listPtr
          .asFunction<void Function(int, int, int)>();

  void wire_dao_gov_referendum_list(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_gov_referendum_list(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_gov_referendum_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32,
              ffi.Uint64)>>('wire_dao_gov_referendum_list');
  late final _wire_dao_gov_referendum_list = _wire_dao_gov_referendum_listPtr
      .asFunction<void Function(int, int, int)>();

  void wire_dao_gov_start_referendum(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int index,
  ) {
    return _wire_dao_gov_start_referendum(
      port_,
      from,
      client,
      dao_id,
      index,
    );
  }

  late final _wire_dao_gov_start_referendumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint32)>>('wire_dao_gov_start_referendum');
  late final _wire_dao_gov_start_referendum =
      _wire_dao_gov_start_referendumPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int)>();

  void wire_dao_gov_vote_for_referendum(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int index,
    int vote,
    bool approve,
  ) {
    return _wire_dao_gov_vote_for_referendum(
      port_,
      from,
      client,
      dao_id,
      index,
      vote,
      approve,
    );
  }

  late final _wire_dao_gov_vote_for_referendumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Bool)>>('wire_dao_gov_vote_for_referendum');
  late final _wire_dao_gov_vote_for_referendum =
      _wire_dao_gov_vote_for_referendumPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, int, int, int, int, bool)>();

  void wire_dao_gov_votes_of_user(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
  ) {
    return _wire_dao_gov_votes_of_user(
      port_,
      from,
      client,
      dao_id,
    );
  }

  late final _wire_dao_gov_votes_of_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32, ffi.Uint64)>>('wire_dao_gov_votes_of_user');
  late final _wire_dao_gov_votes_of_user =
      _wire_dao_gov_votes_of_userPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_dao_gov_run_proposal(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int index,
  ) {
    return _wire_dao_gov_run_proposal(
      port_,
      from,
      client,
      dao_id,
      index,
    );
  }

  late final _wire_dao_gov_run_proposalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint32)>>('wire_dao_gov_run_proposal');
  late final _wire_dao_gov_run_proposal =
      _wire_dao_gov_run_proposalPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int)>();

  void wire_dao_gov_unlock(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
  ) {
    return _wire_dao_gov_unlock(
      port_,
      from,
      client,
      dao_id,
    );
  }

  late final _wire_dao_gov_unlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32, ffi.Uint64)>>('wire_dao_gov_unlock');
  late final _wire_dao_gov_unlock = _wire_dao_gov_unlockPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_dao_memeber_list(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_memeber_list(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_memeber_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Uint64)>>('wire_dao_memeber_list');
  late final _wire_dao_memeber_list =
      _wire_dao_memeber_listPtr.asFunction<void Function(int, int, int)>();

  void wire_dao_guild_memeber_list(
    int port_,
    int client,
    int dao_id,
    int guild_id,
  ) {
    return _wire_dao_guild_memeber_list(
      port_,
      client,
      dao_id,
      guild_id,
    );
  }

  late final _wire_dao_guild_memeber_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
              ffi.Uint64)>>('wire_dao_guild_memeber_list');
  late final _wire_dao_guild_memeber_list = _wire_dao_guild_memeber_listPtr
      .asFunction<void Function(int, int, int, int)>();

  void wire_dao_project_member_list(
    int port_,
    int client,
    int dao_id,
    int project_id,
  ) {
    return _wire_dao_project_member_list(
      port_,
      client,
      dao_id,
      project_id,
    );
  }

  late final _wire_dao_project_member_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_member_list');
  late final _wire_dao_project_member_list = _wire_dao_project_member_listPtr
      .asFunction<void Function(int, int, int, int)>();

  void wire_dao_project_task_list(
    int port_,
    int client,
    int dao_id,
    int project_id,
  ) {
    return _wire_dao_project_task_list(
      port_,
      client,
      dao_id,
      project_id,
    );
  }

  late final _wire_dao_project_task_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_task_list');
  late final _wire_dao_project_task_list = _wire_dao_project_task_listPtr
      .asFunction<void Function(int, int, int, int)>();

  void wire_dao_project_task_info(
    int port_,
    int client,
    int dao_id,
    int project_id,
    int task_id,
  ) {
    return _wire_dao_project_task_info(
      port_,
      client,
      dao_id,
      project_id,
      task_id,
    );
  }

  late final _wire_dao_project_task_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_task_info');
  late final _wire_dao_project_task_info = _wire_dao_project_task_infoPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void wire_dao_project_create_task(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> desc,
    int priority,
    int point,
    ffi.Pointer<wire_StringList> assignees,
    ffi.Pointer<wire_StringList> reviewers,
    ffi.Pointer<wire_uint_8_list> skills,
    ffi.Pointer<ffi.Uint8> max_assignee,
    int amount,
  ) {
    return _wire_dao_project_create_task(
      port_,
      from,
      client,
      dao_id,
      project_id,
      name,
      desc,
      priority,
      point,
      assignees,
      reviewers,
      skills,
      max_assignee,
      amount,
    );
  }

  late final _wire_dao_project_create_taskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8,
              ffi.Uint16,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64)>>('wire_dao_project_create_task');
  late final _wire_dao_project_create_task =
      _wire_dao_project_create_taskPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              int,
              int,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              int,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint8>,
              int)>();

  void wire_dao_project_start_task(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int task_id,
  ) {
    return _wire_dao_project_start_task(
      port_,
      from,
      client,
      dao_id,
      project_id,
      task_id,
    );
  }

  late final _wire_dao_project_start_taskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_start_task');
  late final _wire_dao_project_start_task =
      _wire_dao_project_start_taskPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, int, int, int, int)>();

  void wire_dao_project_request_review(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int task_id,
  ) {
    return _wire_dao_project_request_review(
      port_,
      from,
      client,
      dao_id,
      project_id,
      task_id,
    );
  }

  late final _wire_dao_project_request_reviewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_request_review');
  late final _wire_dao_project_request_review =
      _wire_dao_project_request_reviewPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, int, int, int, int)>();

  void wire_dao_project_task_done(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int task_id,
  ) {
    return _wire_dao_project_task_done(
      port_,
      from,
      client,
      dao_id,
      project_id,
      task_id,
    );
  }

  late final _wire_dao_project_task_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_task_done');
  late final _wire_dao_project_task_done =
      _wire_dao_project_task_donePtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, int, int, int, int)>();

  void wire_dao_project_join_task(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int task_id,
  ) {
    return _wire_dao_project_join_task(
      port_,
      from,
      client,
      dao_id,
      project_id,
      task_id,
    );
  }

  late final _wire_dao_project_join_taskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_join_task');
  late final _wire_dao_project_join_task =
      _wire_dao_project_join_taskPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, int, int, int, int)>();

  void wire_dao_project_leave_task(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int task_id,
  ) {
    return _wire_dao_project_leave_task(
      port_,
      from,
      client,
      dao_id,
      project_id,
      task_id,
    );
  }

  late final _wire_dao_project_leave_taskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_leave_task');
  late final _wire_dao_project_leave_task =
      _wire_dao_project_leave_taskPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, int, int, int, int)>();

  void wire_dao_project_join_task_review(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int task_id,
  ) {
    return _wire_dao_project_join_task_review(
      port_,
      from,
      client,
      dao_id,
      project_id,
      task_id,
    );
  }

  late final _wire_dao_project_join_task_reviewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_join_task_review');
  late final _wire_dao_project_join_task_review =
      _wire_dao_project_join_task_reviewPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, int, int, int, int)>();

  void wire_dao_project_leave_task_review(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int task_id,
  ) {
    return _wire_dao_project_leave_task_review(
      port_,
      from,
      client,
      dao_id,
      project_id,
      task_id,
    );
  }

  late final _wire_dao_project_leave_task_reviewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('wire_dao_project_leave_task_review');
  late final _wire_dao_project_leave_task_review =
      _wire_dao_project_leave_task_reviewPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, int, int, int, int)>();

  void wire_dao_project_make_review(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int task_id,
    bool approve,
    ffi.Pointer<wire_uint_8_list> meta,
  ) {
    return _wire_dao_project_make_review(
      port_,
      from,
      client,
      dao_id,
      project_id,
      task_id,
      approve,
      meta,
    );
  }

  late final _wire_dao_project_make_reviewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Bool,
              ffi.Pointer<wire_uint_8_list>)>>('wire_dao_project_make_review');
  late final _wire_dao_project_make_review =
      _wire_dao_project_make_reviewPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int, int,
              bool, ffi.Pointer<wire_uint_8_list>)>();

  void wire_dao_project_join_request(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    ffi.Pointer<wire_WithGovPs> ext,
  ) {
    return _wire_dao_project_join_request(
      port_,
      from,
      client,
      dao_id,
      project_id,
      ext,
    );
  }

  late final _wire_dao_project_join_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<wire_WithGovPs>)>>('wire_dao_project_join_request');
  late final _wire_dao_project_join_request =
      _wire_dao_project_join_requestPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int,
              ffi.Pointer<wire_WithGovPs>)>();

  void wire_dao_guild_join_request(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int guild_id,
    ffi.Pointer<wire_WithGovPs> ext,
  ) {
    return _wire_dao_guild_join_request(
      port_,
      from,
      client,
      dao_id,
      guild_id,
      ext,
    );
  }

  late final _wire_dao_guild_join_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<wire_WithGovPs>)>>('wire_dao_guild_join_request');
  late final _wire_dao_guild_join_request =
      _wire_dao_guild_join_requestPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int,
              ffi.Pointer<wire_WithGovPs>)>();

  void wire_dao_member_point(
    int port_,
    int client,
    int dao_id,
    ffi.Pointer<wire_uint_8_list> member,
  ) {
    return _wire_dao_member_point(
      port_,
      client,
      dao_id,
      member,
    );
  }

  late final _wire_dao_member_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_dao_member_point');
  late final _wire_dao_member_point = _wire_dao_member_pointPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_dao_apply_project_funds(
    int port_,
    ffi.Pointer<wire_uint_8_list> from,
    int client,
    int dao_id,
    int project_id,
    int amount,
    ffi.Pointer<wire_WithGovPs> ext,
  ) {
    return _wire_dao_apply_project_funds(
      port_,
      from,
      client,
      dao_id,
      project_id,
      amount,
      ext,
    );
  }

  late final _wire_dao_apply_project_fundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<wire_WithGovPs>)>>('wire_dao_apply_project_funds');
  late final _wire_dao_apply_project_funds =
      _wire_dao_apply_project_fundsPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int, int,
              ffi.Pointer<wire_WithGovPs>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<ffi.Uint16> new_box_autoadd_u16_0(
    int value,
  ) {
    return _new_box_autoadd_u16_0(
      value,
    );
  }

  late final _new_box_autoadd_u16_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Uint16)>>(
          'new_box_autoadd_u16_0');
  late final _new_box_autoadd_u16_0 = _new_box_autoadd_u16_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(int)>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_WithGovPs> new_box_autoadd_with_gov_ps_0() {
    return _new_box_autoadd_with_gov_ps_0();
  }

  late final _new_box_autoadd_with_gov_ps_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_WithGovPs> Function()>>(
          'new_box_autoadd_with_gov_ps_0');
  late final _new_box_autoadd_with_gov_ps_0 = _new_box_autoadd_with_gov_ps_0Ptr
      .asFunction<ffi.Pointer<wire_WithGovPs> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MemberGroup extends ffi.Struct {
  @ffi.Uint8()
  external int scope;

  @ffi.Uint64()
  external int id;
}

class wire_WithGovPs extends ffi.Struct {
  @ffi.Uint8()
  external int run_type;

  @ffi.Uint64()
  external int amount;

  external wire_MemberGroup member;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
