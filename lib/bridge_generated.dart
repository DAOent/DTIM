// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class ChainWraper {
  Future<BoxedPoint> returningStructsWithBoxedFields({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturningStructsWithBoxedFieldsConstMeta;

  Future<List<String>> seedGenerate({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSeedGenerateConstMeta;

  Future<String> getSeedPhrase({required String seedStr, required String name, required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSeedPhraseConstMeta;
}

class BoxedPoint {
  final Point point;

  BoxedPoint({
    required this.point,
  });
}

class Point {
  final double x;
  final double y;

  Point({
    required this.x,
    required this.y,
  });
}

class ChainWraperImpl implements ChainWraper {
  final ChainWraperPlatform _platform;
  factory ChainWraperImpl(ExternalLibrary dylib) => ChainWraperImpl.raw(ChainWraperPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ChainWraperImpl.wasm(FutureOr<WasmModule> module) => ChainWraperImpl(module as ExternalLibrary);
  ChainWraperImpl.raw(this._platform);
  Future<BoxedPoint> returningStructsWithBoxedFields({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_returning_structs_with_boxed_fields(port_),
        parseSuccessData: _wire2api_boxed_point,
        constMeta: kReturningStructsWithBoxedFieldsConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kReturningStructsWithBoxedFieldsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "returning_structs_with_boxed_fields",
        argNames: [],
      );

  Future<List<String>> seedGenerate({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_seed_generate(port_),
        parseSuccessData: _wire2api_StringList,
        constMeta: kSeedGenerateConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSeedGenerateConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "seed_generate",
        argNames: [],
      );

  Future<String> getSeedPhrase(
          {required String seedStr, required String name, required String password, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_seed_phrase(port_, _platform.api2wire_String(seedStr),
            _platform.api2wire_String(name), _platform.api2wire_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetSeedPhraseConstMeta,
        argValues: [seedStr, name, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetSeedPhraseConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_seed_phrase",
        argNames: ["seedStr", "name", "password"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  Point _wire2api_box_point(dynamic raw) {
    return _wire2api_point(raw);
  }

  BoxedPoint _wire2api_boxed_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BoxedPoint(
      point: _wire2api_box_point(arr[0]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  Point _wire2api_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Point(
      x: _wire2api_f64(arr[0]),
      y: _wire2api_f64(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

class ChainWraperPlatform extends FlutterRustBridgeBase<ChainWraperWire> {
  ChainWraperPlatform(ffi.DynamicLibrary dylib) : super(ChainWraperWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ChainWraperWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ChainWraperWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ChainWraperWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  void wire_returning_structs_with_boxed_fields(
    int port_,
  ) {
    return _wire_returning_structs_with_boxed_fields(
      port_,
    );
  }

  late final _wire_returning_structs_with_boxed_fieldsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_returning_structs_with_boxed_fields');
  late final _wire_returning_structs_with_boxed_fields =
      _wire_returning_structs_with_boxed_fieldsPtr.asFunction<void Function(int)>();

  void wire_seed_generate(
    int port_,
  ) {
    return _wire_seed_generate(
      port_,
    );
  }

  late final _wire_seed_generatePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_seed_generate');
  late final _wire_seed_generate = _wire_seed_generatePtr.asFunction<void Function(int)>();

  void wire_get_seed_phrase(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed_str,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_get_seed_phrase(
      port_,
      seed_str,
      name,
      password,
    );
  }

  late final _wire_get_seed_phrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_seed_phrase');
  late final _wire_get_seed_phrase = _wire_get_seed_phrasePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>('free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct =
      _free_WireSyncReturnStructPtr.asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
