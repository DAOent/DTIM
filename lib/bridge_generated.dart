// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class RustWraper {
  Future<int> connect({required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta;

  /// 获取种子
  Future<List<String>> seedGenerate({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSeedGenerateConstMeta;

  /// 种子换取账户信息
  Future<String> getSeedPhrase(
      {required String seedStr,
      required String name,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetSeedPhraseConstMeta;

  Future<bool> addKeyring(
      {required String keyringStr, required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddKeyringConstMeta;

  Future<String> signFromAddress(
      {required String address, required String ctx, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignFromAddressConstMeta;

  Future<AssetAccountData> nativeBalance(
      {required int client, required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNativeBalanceConstMeta;

  Future<AssetAccountData> daoBalance(
      {required int client,
      required int daoId,
      required String address,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoBalanceConstMeta;

  Future<List<Quarter>> daoRoadmap(
      {required int client,
      required int daoId,
      required int year,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoRoadmapConstMeta;

  Future<List<ProjectInfo>> daoProjects(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoProjectsConstMeta;

  Future<List<GuildInfo>> daoGuilds(
      {required int client, required int daoId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDaoGuildsConstMeta;
}

class AssetAccountData {
  final int free;
  final int reserved;
  final int frozen;

  const AssetAccountData({
    required this.free,
    required this.reserved,
    required this.frozen,
  });
}

/// Guild information
/// 组织内公会信息
class GuildInfo {
  /// creator of DAO
  /// 创建者
  final String creator;

  /// The block that creates the DAO
  /// DAO创建的区块
  final int startBlock;

  /// Purpose of the DAO.
  /// DAO 目标宗旨
  final String name;

  /// Purpose of the DAO.
  /// DAO 目标宗旨
  final String desc;

  /// DAO 元数据 图片等内容
  final String metaData;

  /// State of the DAO
  /// DAO状态
  final int status;

  const GuildInfo({
    required this.creator,
    required this.startBlock,
    required this.name,
    required this.desc,
    required this.metaData,
    required this.status,
  });
}

/// Project specific information
/// 项目信息
class ProjectInfo {
  /// boardID
  /// 看板ID
  final int id;

  /// 项目名
  final String name;

  /// 项目介绍
  final String description;

  /// creator of WETEE
  /// 创建者
  final String creator;

  /// State of the WETEE
  /// WETEE状态
  final int status;

  const ProjectInfo({
    required this.id,
    required this.name,
    required this.description,
    required this.creator,
    required this.status,
  });
}

/// roadmap 季度
class Quarter {
  final int year;
  final int quarter;
  final List<QuarterTask> tasks;

  const Quarter({
    required this.year,
    required this.quarter,
    required this.tasks,
  });
}

/// roadmap 任务
class QuarterTask {
  final int id;

  /// 任务名称
  /// name of the Task.
  final String name;

  /// 任务描述
  /// Purpose of the Task.
  final String description;

  /// priority
  /// 优先程度
  final int priority;

  /// creator of Task
  /// 创建者
  final String creator;

  /// tag info
  /// 数据标签
  final Uint8List tags;

  /// State of the Task
  /// DAO状态
  /// ToDo = 0,
  /// InProgress = 1,
  /// InReview = 2,
  /// Done = 3,
  final int status;

  const QuarterTask({
    required this.id,
    required this.name,
    required this.description,
    required this.priority,
    required this.creator,
    required this.tags,
    required this.status,
  });
}

class RustWraperImpl implements RustWraper {
  final RustWraperPlatform _platform;
  factory RustWraperImpl(ExternalLibrary dylib) =>
      RustWraperImpl.raw(RustWraperPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustWraperImpl.wasm(FutureOr<WasmModule> module) =>
      RustWraperImpl(module as ExternalLibrary);
  RustWraperImpl.raw(this._platform);
  Future<int> connect({required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kConnectConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect",
        argNames: ["url"],
      );

  Future<List<String>> seedGenerate({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_seed_generate(port_),
      parseSuccessData: _wire2api_StringList,
      constMeta: kSeedGenerateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSeedGenerateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "seed_generate",
        argNames: [],
      );

  Future<String> getSeedPhrase(
      {required String seedStr,
      required String name,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(seedStr);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_seed_phrase(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kGetSeedPhraseConstMeta,
      argValues: [seedStr, name, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSeedPhraseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_seed_phrase",
        argNames: ["seedStr", "name", "password"],
      );

  Future<bool> addKeyring(
      {required String keyringStr, required String password, dynamic hint}) {
    var arg0 = _platform.api2wire_String(keyringStr);
    var arg1 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_keyring(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kAddKeyringConstMeta,
      argValues: [keyringStr, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddKeyringConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_keyring",
        argNames: ["keyringStr", "password"],
      );

  Future<String> signFromAddress(
      {required String address, required String ctx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    var arg1 = _platform.api2wire_String(ctx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sign_from_address(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSignFromAddressConstMeta,
      argValues: [address, ctx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignFromAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_from_address",
        argNames: ["address", "ctx"],
      );

  Future<AssetAccountData> nativeBalance(
      {required int client, required String address, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_native_balance(port_, arg0, arg1),
      parseSuccessData: _wire2api_asset_account_data,
      constMeta: kNativeBalanceConstMeta,
      argValues: [client, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNativeBalanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "native_balance",
        argNames: ["client", "address"],
      );

  Future<AssetAccountData> daoBalance(
      {required int client,
      required int daoId,
      required String address,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_balance(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_asset_account_data,
      constMeta: kDaoBalanceConstMeta,
      argValues: [client, daoId, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoBalanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_balance",
        argNames: ["client", "daoId", "address"],
      );

  Future<List<Quarter>> daoRoadmap(
      {required int client,
      required int daoId,
      required int year,
      dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    var arg2 = api2wire_u32(year);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dao_roadmap(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_quarter,
      constMeta: kDaoRoadmapConstMeta,
      argValues: [client, daoId, year],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoRoadmapConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_roadmap",
        argNames: ["client", "daoId", "year"],
      );

  Future<List<ProjectInfo>> daoProjects(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_projects(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_project_info,
      constMeta: kDaoProjectsConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoProjectsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_projects",
        argNames: ["client", "daoId"],
      );

  Future<List<GuildInfo>> daoGuilds(
      {required int client, required int daoId, dynamic hint}) {
    var arg0 = api2wire_u32(client);
    var arg1 = _platform.api2wire_u64(daoId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dao_guilds(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_guild_info,
      constMeta: kDaoGuildsConstMeta,
      argValues: [client, daoId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDaoGuildsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dao_guilds",
        argNames: ["client", "daoId"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AssetAccountData _wire2api_asset_account_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AssetAccountData(
      free: _wire2api_u64(arr[0]),
      reserved: _wire2api_u64(arr[1]),
      frozen: _wire2api_u64(arr[2]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  GuildInfo _wire2api_guild_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return GuildInfo(
      creator: _wire2api_String(arr[0]),
      startBlock: _wire2api_u64(arr[1]),
      name: _wire2api_String(arr[2]),
      desc: _wire2api_String(arr[3]),
      metaData: _wire2api_String(arr[4]),
      status: _wire2api_u8(arr[5]),
    );
  }

  List<GuildInfo> _wire2api_list_guild_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_guild_info).toList();
  }

  List<ProjectInfo> _wire2api_list_project_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_project_info).toList();
  }

  List<Quarter> _wire2api_list_quarter(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_quarter).toList();
  }

  List<QuarterTask> _wire2api_list_quarter_task(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_quarter_task).toList();
  }

  ProjectInfo _wire2api_project_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ProjectInfo(
      id: _wire2api_u64(arr[0]),
      name: _wire2api_String(arr[1]),
      description: _wire2api_String(arr[2]),
      creator: _wire2api_String(arr[3]),
      status: _wire2api_u8(arr[4]),
    );
  }

  Quarter _wire2api_quarter(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Quarter(
      year: _wire2api_u32(arr[0]),
      quarter: _wire2api_u32(arr[1]),
      tasks: _wire2api_list_quarter_task(arr[2]),
    );
  }

  QuarterTask _wire2api_quarter_task(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return QuarterTask(
      id: _wire2api_u64(arr[0]),
      name: _wire2api_String(arr[1]),
      description: _wire2api_String(arr[2]),
      priority: _wire2api_u8(arr[3]),
      creator: _wire2api_String(arr[4]),
      tags: _wire2api_uint_8_list(arr[5]),
      status: _wire2api_u8(arr[6]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustWraperPlatform extends FlutterRustBridgeBase<RustWraperWire> {
  RustWraperPlatform(ffi.DynamicLibrary dylib) : super(RustWraperWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustWraperWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWraperWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWraperWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_connect(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_connect(
      port_,
      url,
    );
  }

  late final _wire_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_connect');
  late final _wire_connect = _wire_connectPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_seed_generate(
    int port_,
  ) {
    return _wire_seed_generate(
      port_,
    );
  }

  late final _wire_seed_generatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_seed_generate');
  late final _wire_seed_generate =
      _wire_seed_generatePtr.asFunction<void Function(int)>();

  void wire_get_seed_phrase(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed_str,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_get_seed_phrase(
      port_,
      seed_str,
      name,
      password,
    );
  }

  late final _wire_get_seed_phrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_seed_phrase');
  late final _wire_get_seed_phrase = _wire_get_seed_phrasePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_keyring(
    int port_,
    ffi.Pointer<wire_uint_8_list> keyring_str,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_add_keyring(
      port_,
      keyring_str,
      password,
    );
  }

  late final _wire_add_keyringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_keyring');
  late final _wire_add_keyring = _wire_add_keyringPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sign_from_address(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
    ffi.Pointer<wire_uint_8_list> ctx,
  ) {
    return _wire_sign_from_address(
      port_,
      address,
      ctx,
    );
  }

  late final _wire_sign_from_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_sign_from_address');
  late final _wire_sign_from_address = _wire_sign_from_addressPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_native_balance(
    int port_,
    int client,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_native_balance(
      port_,
      client,
      address,
    );
  }

  late final _wire_native_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_native_balance');
  late final _wire_native_balance = _wire_native_balancePtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_dao_balance(
    int port_,
    int client,
    int dao_id,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_dao_balance(
      port_,
      client,
      dao_id,
      address,
    );
  }

  late final _wire_dao_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_dao_balance');
  late final _wire_dao_balance = _wire_dao_balancePtr.asFunction<
      void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_dao_roadmap(
    int port_,
    int client,
    int dao_id,
    int year,
  ) {
    return _wire_dao_roadmap(
      port_,
      client,
      dao_id,
      year,
    );
  }

  late final _wire_dao_roadmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
              ffi.Uint32)>>('wire_dao_roadmap');
  late final _wire_dao_roadmap =
      _wire_dao_roadmapPtr.asFunction<void Function(int, int, int, int)>();

  void wire_dao_projects(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_projects(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_projectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Uint64)>>('wire_dao_projects');
  late final _wire_dao_projects =
      _wire_dao_projectsPtr.asFunction<void Function(int, int, int)>();

  void wire_dao_guilds(
    int port_,
    int client,
    int dao_id,
  ) {
    return _wire_dao_guilds(
      port_,
      client,
      dao_id,
    );
  }

  late final _wire_dao_guildsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Uint32, ffi.Uint64)>>('wire_dao_guilds');
  late final _wire_dao_guilds =
      _wire_dao_guildsPtr.asFunction<void Function(int, int, int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
