#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::model::AssetAccountData;
use crate::model::GovProps;
use crate::model::GovReferendum;
use crate::model::GovVote;
use crate::model::GuildInfo;
use crate::model::ProjectInfo;
use crate::model::Quarter;
use crate::model::QuarterTask;
use crate::model::Tally;

// Section: wire functions

fn wire_connect_impl(port_: MessagePort, url: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_url = url.wire2api();
            move |task_callback| connect(api_url)
        },
    )
}
fn wire_seed_generate_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "seed_generate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(seed_generate()),
    )
}
fn wire_get_seed_phrase_impl(
    port_: MessagePort,
    seed_str: impl Wire2Api<String> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    password: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_seed_phrase",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seed_str = seed_str.wire2api();
            let api_name = name.wire2api();
            let api_password = password.wire2api();
            move |task_callback| get_seed_phrase(api_seed_str, api_name, api_password)
        },
    )
}
fn wire_add_keyring_impl(
    port_: MessagePort,
    keyring_str: impl Wire2Api<String> + UnwindSafe,
    password: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_keyring",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_keyring_str = keyring_str.wire2api();
            let api_password = password.wire2api();
            move |task_callback| add_keyring(api_keyring_str, api_password)
        },
    )
}
fn wire_sign_from_address_impl(
    port_: MessagePort,
    address: impl Wire2Api<String> + UnwindSafe,
    ctx: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sign_from_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_address = address.wire2api();
            let api_ctx = ctx.wire2api();
            move |task_callback| sign_from_address(api_address, api_ctx)
        },
    )
}
fn wire_get_block_number_impl(port_: MessagePort, client: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_block_number",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            move |task_callback| get_block_number(api_client)
        },
    )
}
fn wire_native_balance_impl(
    port_: MessagePort,
    client: impl Wire2Api<u32> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "native_balance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            let api_address = address.wire2api();
            move |task_callback| native_balance(api_client, api_address)
        },
    )
}
fn wire_dao_balance_impl(
    port_: MessagePort,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_balance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_address = address.wire2api();
            move |task_callback| dao_balance(api_client, api_dao_id, api_address)
        },
    )
}
fn wire_dao_roadmap_impl(
    port_: MessagePort,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    year: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_roadmap",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_year = year.wire2api();
            move |task_callback| dao_roadmap(api_client, api_dao_id, api_year)
        },
    )
}
fn wire_dao_create_roadmap_task_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    roadmap_id: impl Wire2Api<u32> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    priority: impl Wire2Api<u8> + UnwindSafe,
    tags: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_create_roadmap_task",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_roadmap_id = roadmap_id.wire2api();
            let api_name = name.wire2api();
            let api_priority = priority.wire2api();
            let api_tags = tags.wire2api();
            move |task_callback| {
                dao_create_roadmap_task(
                    api_from,
                    api_client,
                    api_dao_id,
                    api_roadmap_id,
                    api_name,
                    api_priority,
                    api_tags,
                )
            }
        },
    )
}
fn wire_join_dao_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    share_expect: impl Wire2Api<u32> + UnwindSafe,
    value: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "join_dao",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_share_expect = share_expect.wire2api();
            let api_value = value.wire2api();
            move |task_callback| {
                join_dao(
                    api_from,
                    api_client,
                    api_dao_id,
                    api_share_expect,
                    api_value,
                )
            }
        },
    )
}
fn wire_dao_memebers_impl(
    port_: MessagePort,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_memebers",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            move |task_callback| dao_memebers(api_client, api_dao_id)
        },
    )
}
fn wire_dao_projects_impl(
    port_: MessagePort,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_projects",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            move |task_callback| dao_projects(api_client, api_dao_id)
        },
    )
}
fn wire_dao_guilds_impl(
    port_: MessagePort,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_guilds",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            move |task_callback| dao_guilds(api_client, api_dao_id)
        },
    )
}
fn wire_ss58_impl(
    port_: MessagePort,
    address: impl Wire2Api<String> + UnwindSafe,
    prefix: impl Wire2Api<Option<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "ss58",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_address = address.wire2api();
            let api_prefix = prefix.wire2api();
            move |task_callback| ss58(api_address, api_prefix)
        },
    )
}
fn wire_create_project_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    desc: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_project",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_name = name.wire2api();
            let api_desc = desc.wire2api();
            move |task_callback| {
                create_project(api_from, api_client, api_dao_id, api_name, api_desc)
            }
        },
    )
}
fn wire_create_guild_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    desc: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_guild",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_name = name.wire2api();
            let api_desc = desc.wire2api();
            move |task_callback| create_guild(api_from, api_client, api_dao_id, api_name, api_desc)
        },
    )
}
fn wire_dao_gov_pending_referendum_list_impl(
    port_: MessagePort,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_gov_pending_referendum_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            move |task_callback| dao_gov_pending_referendum_list(api_client, api_dao_id)
        },
    )
}
fn wire_dao_gov_referendum_list_impl(
    port_: MessagePort,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_gov_referendum_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            move |task_callback| dao_gov_referendum_list(api_client, api_dao_id)
        },
    )
}
fn wire_dao_gov_start_referendum_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    index: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_gov_start_referendum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_index = index.wire2api();
            move |task_callback| {
                dao_gov_start_referendum(api_from, api_client, api_dao_id, api_index)
            }
        },
    )
}
fn wire_dao_gov_vote_for_referendum_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    index: impl Wire2Api<u32> + UnwindSafe,
    vote: impl Wire2Api<u64> + UnwindSafe,
    approve: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_gov_vote_for_referendum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_index = index.wire2api();
            let api_vote = vote.wire2api();
            let api_approve = approve.wire2api();
            move |task_callback| {
                dao_gov_vote_for_referendum(
                    api_from,
                    api_client,
                    api_dao_id,
                    api_index,
                    api_vote,
                    api_approve,
                )
            }
        },
    )
}
fn wire_dao_gov_votes_of_user_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_gov_votes_of_user",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            move |task_callback| dao_gov_votes_of_user(api_from, api_client, api_dao_id)
        },
    )
}
fn wire_dao_gov_run_proposal_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
    index: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_gov_run_proposal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            let api_index = index.wire2api();
            move |task_callback| dao_gov_run_proposal(api_from, api_client, api_dao_id, api_index)
        },
    )
}
fn wire_dao_gov_unlock_impl(
    port_: MessagePort,
    from: impl Wire2Api<String> + UnwindSafe,
    client: impl Wire2Api<u32> + UnwindSafe,
    dao_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dao_gov_unlock",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_from = from.wire2api();
            let api_client = client.wire2api();
            let api_dao_id = dao_id.wire2api();
            move |task_callback| dao_gov_unlock(api_from, api_client, api_dao_id)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for AssetAccountData {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.free.into_dart(),
            self.reserved.into_dart(),
            self.frozen.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AssetAccountData {}

impl support::IntoDart for GovProps {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.index.into_dart(),
            self.hash.into_dart(),
            self.runtime_call.into_dart(),
            self.member_group.into_dart(),
            self.account.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GovProps {}

impl support::IntoDart for GovReferendum {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.hash.into_dart(),
            self.end.into_dart(),
            self.proposal.into_dart(),
            self.delay.into_dart(),
            self.tally.into_dart(),
            self.member_group.into_dart(),
            self.status.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GovReferendum {}

impl support::IntoDart for GovVote {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.dao_id.into_dart(),
            self.pledge.into_dart(),
            self.opinion.into_dart(),
            self.vote_weight.into_dart(),
            self.unlock_block.into_dart(),
            self.referendum_index.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GovVote {}

impl support::IntoDart for GuildInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.creator.into_dart(),
            self.start_block.into_dart(),
            self.name.into_dart(),
            self.desc.into_dart(),
            self.meta_data.into_dart(),
            self.status.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GuildInfo {}

impl support::IntoDart for ProjectInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.name.into_dart(),
            self.description.into_dart(),
            self.creator.into_dart(),
            self.status.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ProjectInfo {}

impl support::IntoDart for Quarter {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.year.into_dart(),
            self.quarter.into_dart(),
            self.tasks.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Quarter {}

impl support::IntoDart for QuarterTask {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.name.into_dart(),
            self.priority.into_dart(),
            self.creator.into_dart(),
            self.tags.into_dart(),
            self.status.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for QuarterTask {}

impl support::IntoDart for Tally {
    fn into_dart(self) -> support::DartAbi {
        vec![self.yes.into_dart(), self.no.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Tally {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
